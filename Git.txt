ls -ah   查看当前文件下的所有文件

安装GIT之后的设置
 git config --global user.name "Your Name"
 git config --global user.email "email@example.com"

git init命令把这个目录变成Git可以管理的仓库：

git add告诉Git，把文件添加到仓库
git commit告诉Git，把文件提交到仓库：

git reset --hard HEAD^  回退到上一个版本（上上一个版本就是HEAD^^）；
                                        （上100个版本可以写成HEAD~100）



git reset --hard CommitID  返回到CommitID这个版本

git log可以查看提交历史，以便确定要回退到哪个版本。
git log --graph --pretty=oneline --abbrev-commit  带参数的git log也可以看到分支的合并情况
git reflog 查看命令历史，以便确定要回到未来的哪个版本

工作区------>(add) 暂存区stage--------->(commit) 版本库

git checkout -- file可以丢弃工作区的修改（回到最近一次git commit或git add时的状态）
git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。
         当我们用HEAD时，表示最新的版本

rm fileName 删除文件


$ ssh-keygen -t rsa -C "youremail@example.com" 创建SSH Key 在C:\Users\Administrator\.ssh中
登陆GitHub，打开“Account settings”，“SSH Keys”页面
点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
------
GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送

GitHub上添加远程库http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000

git remote add origin https://github.com/dabin118（GitHub账户名）/HelloWord(远程仓库名).git 根据GitHub的提示，从这个远程仓库克隆出新的仓库，也可以把一个已有的本地仓库与远程仓库关联，然后，把本地仓库的内容推送到GitHub仓库（本地仓库与远程仓库关联）

git push -u origin master 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令
git push origin master 之后Push命令


git clone git@github.com:michaelliao(GitHub账户名)/gitskills(远程仓库名).git 克隆一个本地库


分支在实际中有什么用呢？
假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。
现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。
其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。
但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。


git checkout -b dev  我们创建dev分支，然后切换到dev分支==git branch dev + git checkout dev

git branch命令查看当前分支：

git merge dev 把dev上的分支合并到当前分支（快速，可能会冲突）快速合并看不出来曾经做过合并

git merge --no-ff -m "描述" dev 普通模式合并，合并后的历史有分支，能看出来曾经做过合并

git branch -d dev 删除dev分支了：
git branch -D dev 强行删除


git stash 以把当前工作现场“储藏”起来，等以后恢复现场后继续工作(用Status看是"干净"的)
git stash list 查看暂时“储藏”的地方
git stash apply stash@{0}恢复但是恢复后，stash内容并不删除，用git stash drop来删除
git stash pop，恢复的同时把stash内容也删了

git clone git@github.com:michaelliao/learngit.git  远程库clone时，默认情况下，只能看到本地的master分支
git checkout -b dev origin/dev  在dev分支上开发，就必须创建远程origin的dev分支到本地
git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name建立本地分支和远程分支的关联

标签：
发布一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。
git tag v1.0(标签名称) 就可以打一个新标签
git tag 查看所有标签：
git tag v0.9(tagname) CommitId  对commit id之后，打上标签
git show v0.9(tagname) 查看标签信息
git tag -a v0.1 -m "version 0.1 released" 3628164 创建带有说明的标签，用-a指定标签名，-m指定说明文字：
git tag -s v0.2 -m "signed version 0.2 released" fec145a 通过-s用私钥签名一个标签:签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：
git tag -d v0.1 标签打错了，也可以删除:创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除
git push origin <tagname>： 推送某个标签到远程
 git push origin --tags  一次性推送全部尚未推送到远程的本地标签

git config --global color.ui true 让Git显示颜色，会让命令输出看起来更醒目

配置别名:
git config --global alias.st status   配置st就表示status
git config --global alias.co checkout  配置co表示checkout
git config --global alias.ci commit  配置ci表示commit
git config --global alias.br branch  配置br表示branch
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit" 配置lg成。。